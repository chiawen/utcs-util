#!/usr/bin/env python
import sys
import os
import os.path
import argparse
import getpass
from datetime import datetime
from math import floor, log10, ceil

CONDOR_TEMPLATE = """
# Automatically created with condargs
# Created by %(user)s on %(timestamp)s
# With command:
#    %(runcommand)s
# Run in directory:
#    %(pwd)s
# Total number of files: %(numfiles)d
# Total number of jobs:  %(numjobs)d

universe = vanilla
requirements = InMastodon

getenv = true

Initialdir = %(pwd)s
Executable = %(exc)s
Log = condorlog.%(jobname)s

+Group   = "GRAD"
+Project = "AI_ROBOTICS"
+ProjectDescription = "%(jobname)s (generated by condargs)"

# Begin actual job information
%(jobcommands)s

# end of %(jobname)s
"""

COMMAND_TEMPLATE = """
# item %(itemid)s  ---------------------------
Error = %(outdir)s/err.%(itemid)s
Output = %(outdir)s/out.%(itemid)s%(suffix)s
Arguments = %(args)s %(filenames)s
Queue
"""

def timestamp():
    return str(datetime.utcnow())

def rununix(cmd):
    with os.popen(cmd) as p:
        retval = p.read()
    return retval

def which(executable):
    return rununix("/bin/which " + executable)

def make_absolute(pathname):
    return os.path.abspath(pathname)

def make_itemformatter(name, length, splits):
    numdigits = int(floor(log10(ceil(length/float(splits))))) + 1
    _fmt = name + "_%0" + str(numdigits) + "d"
    def _format(val):
        return _fmt % val
    return _format

def main():
    parser = argparse.ArgumentParser('Runs a command on Condor, with arguments read from stdin')
    parser.add_argument('jobname', help='Name of the job.')
    parser.add_argument('group', type=int, help='Number of inputs to group into one ')
    parser.add_argument('suffix', help='Suffix to add to stdout filenames')
    parser.add_argument('outputdir', help='Directory to place output files. Will be converted to an absolute path.')
    parser.add_argument('command', help='Command to run')
    parser.add_argument('args', nargs=argparse.REMAINDER)
    args = parser.parse_args()

    outdir = make_absolute(args.outputdir)
    runargs = " ".join(args.args)
    files = [l.strip() for l in list(sys.stdin)]
    itemformatter = make_itemformatter(args.jobname, len(files), args.group)

    template_vars = dict(
        user=getpass.getuser(),
        pwd=os.getcwd(),
        jobname=args.jobname,
        timestamp=timestamp(),
        runcommand=" ".join(sys.argv),
        exc=which(args.command),
        outdir=outdir,
        numfiles=len(files),
    )

    i = 0
    setups = []
    while files:
        nextgroup, files = files[:args.group], files[args.group:]

        local_vars = dict(
            outdir=outdir,
            args=runargs,
            filenames = " ".join(nextgroup),
            itemid=itemformatter(i),
            suffix=args.suffix,
        )
        setups.append(COMMAND_TEMPLATE % local_vars)

        i += 1

    template_vars['numjobs'] = i
    template_vars['jobcommands'] = "\n".join(setups)
    with open('submit.' + args.jobname, "w") as submitfile:
        submitfile.write(CONDOR_TEMPLATE % template_vars)

if __name__ == '__main__':
    main()

