#!/usr/bin/env python

import sys
import os
import os.path
import argparse
import getpass
from datetime import datetime

CONDOR_TEMPLATE = """
# Automatically created with condorizer
# Crated by %(user)s on %(timestamp)s
# With command: %(runcommand)s
# In directory: %(pwd)s

# Begin Job

universe = vanilla
%(requirements)s

getenv = true

Initialdir = %(pwd)s
Executable = %(exc)s

+Group = "GRAD"
+Project = "AI_ROBOTICS"
+ProjectDescription = "%(jobname)s (generated by condorizer)"

# Begin final job information
Error = %(errfile)s
Output = %(outfile)s
Arguments = %(args)s
Queue

# end of %(jobname)s
"""

def timestamp():
    return str(datetime.utcnow())

def rununix(cmd):
    with os.popen(cmd) as p:
        return p.read()

def which(executable):
    return rununix("/bin/which " + executable)

def make_absolute(pathname):
    return os.path.abspath(pathname)

def main():
    parser = argparse.ArgumentParser('Runs a command on Condor.')
    parser.add_argument('--jobname', '-j', help='Job name (default: infer from command)')
    parser.add_argument('--output', '-o', help='Output file (default, YYYYMMDDhhmmss-jobname.out)')
    parser.add_argument('--gpu', '-g', action='store_true', help='Indicates this job needs a GPU (default: off)')
    parser.add_argument('--highmem', '-m', action='store_true', help='Indicates this job needs extra memory (default: off)')
    #parser.add_argument('--memory', type=int, help='Indicates the job needs this much memory.')
    parser.add_argument('--dry-run', '-n', action='store_true', help='Outputs the job file to stdout, and does not submit to condor (default: off)')
    parser.add_argument('command', help='Command to run')
    parser.add_argument('args', nargs=argparse.REMAINDER)
    args = parser.parse_args()

    timestamp = datetime.now()
    pwd = make_absolute(os.getcwd())

    if args.gpu:
        requirements = "requirements = Cuda8 && TARGET.GPUSlot && CUDAGlobalMemoryMb >= 6144\nrequest_GPUs = 1\n+GPUJob = true && NumJobStarts == 0"
    elif args.highmem:
        requirements = "requirements = InMastodon && Memory >= 64 * 1024"
    else:
        requirements = "requirements = InMastodon"

    if args.jobname:
        jobname = args.jobname
    elif args.command.startswith('python'):
        jobname = args.args[0]
        for a in args.args:
            if a.endswith(".py"):
                jobname = a
                break
    else:
        jobname = args.command

    default_outputname = timestamp.strftime("%Y%m%d%H%M%S.%f") + "-"  + jobname
    if args.output:
        if os.path.isdir(args.output):
            p = os.path.join(make_absolute(args.output), default_outputname)
            output = p + ".out"
            error = p + ".err"
        else:
            output = make_absolute(args.output) + ".out"
            error = output + ".err"
    else:
        output = os.path.join(pwd, default_outputname + ".out")
        error = os.path.join(pwd, default_outputname + ".err")

    template_vars = dict(
        runcommand=" ".join(sys.argv),
        user=getpass.getuser(),
        pwd=pwd,
        jobname=jobname,
        timestamp=str(timestamp),
        exc=which(args.command),
        args=" ".join(args.args),
        requirements=requirements,
        outfile=output,
        errfile=error,
    )

    script = CONDOR_TEMPLATE % template_vars

    if args.dry_run:
        sys.stdout.write(script)
    else:
        jobfile = os.path.join("/tmp", default_outputname + ".job")
        with open(jobfile, 'w') as f:
            f.write(script)
        rununix("/lusr/opt/condor/bin/condor_submit %s" % jobfile)
        os.remove(jobfile)


if __name__ == '__main__':
    main()


