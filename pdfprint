#!/usr/bin/env python

import sys
import os
import getopt
import urllib2
import tempfile 

from subprocess import Popen, PIPE

# global temp file array so we can clean up after ourselves
temp_files = []

def make_tempfile(data):
    tmpfn = tempfile.mktemp()
    tmp = open(tmpfn, 'w')
    tmp.write(data)
    tmp.close()
    temp_files.append(tmpfn)
    return tmpfn

def get_file(filename):
    url_fronts = ["http", "ftp", "https"]
    for url_front in url_fronts:
        if filename.startswith(url_front):
            data = urllib2.urlopen(filename).read()
            return open(make_tempfile(data))
    
    if filename == "-":
        return sys.stdin
    else:
        return open(filename)

def make_ps(filename, filedata):
    if filename.endswith(".pdf"):
        return Popen(["pdf2ps", "-", "-"], stdin=filedata, stdout=PIPE)
    else:
        return Popen(["cat", "-"], stdin=filedata, stdout=PIPE)

def make_twoup(filedata):
    return Popen(["psbind", "-q", "--tumble", "-2"], stdin=filedata, stdout=PIPE, stderr=PIPE)

def make_copies(data, copies):
    tmpfn = make_tempfile(data)
    return Popen(["psmerge"] + copies * [tmpfn], stdout=PIPE)

def lpr(header, printer, filedata):
    cmd = ["lpr"]
    if not header:
        cmd.append("-h")
    cmd.append("-P")
    cmd.append(printer)
    cmd.append("-")

    return Popen(cmd, stdin=filedata, stdout=PIPE)

def help():
    helpmsg = (
        "Usage: %s [-h] [-H] [-# copies] [-2] [-P printer] file_or_url\n"
        "Options:\n"
        "    -h            Print this help message.\n"
        "    -H            Include the header page in the job.\n"
        "    -# <number>   Print <number> copies.\n"
        "    -P <printer>  Use <printer> rather than the default.\n"
        "    -2            Two-up the document.\n"
        "    -F            Fake print. Output a postscript file to stdout\n"
        "                  instead of lpr.\n"
        "    --pdf         Fake output is a PDF file instead of a postscript\n"
        "                  file. Only works in conjunction with -F.\n"
        "\n"
    )
    sys.stderr.write(helpmsg % sys.argv[0])


def main():
    # default command line options
    header = False
    printer = os.environ['PRINTER']
    twoup = False
    copies = 1
    fakeprint = False
    fakepdf = False

    # parse command line tools
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hH#:2P:F", ["pdf"])
    except:
        help()
        sys.exit(2)

    for o,a in opts:
        if o == "-h":
            help()
            sys.exit(1)
        elif o == "-H":
            header = True
        elif o == "-2":
            twoup = True
        elif o == "-P":
            printer = a
        elif o == "-F":
            fakeprint = True
        elif o == '--pdf':
            fakepdf = True
        elif o == "-#":
            try:
                copies = int(a)
                if copies <= 0:
                    sys.stderr.write("Error: really? %d copies?\n\n" % copies)
                    help()
                    sys.exit(3)
            except:
                sys.stderr.write("Error: -# requires an integer as an argument.\n\n")
                help()
                sys.exit(3)
        else:
            sys.stderr.write("Error: %s is not a valid option.\n\n" % o)
            help()
            sys.exit(1)

    if len(args) != 1:
        sys.stderr.write("Error: must specify exactly one file name or url.\n\n")
        help()
        sys.exit(1)

    # pull the file off the filesystem or the web, as needed
    filename = args[0]
    filedata = get_file(filename)

    # generate the necessary chain of commands to perform our result
    proc = make_ps(filename, filedata)

    if twoup:
        proc = make_twoup(proc.stdout)

    if copies > 1:
        stdoutdata, stderrdata = proc.communicate()
        proc = make_copies(stdoutdata, copies)
        
    if not fakeprint:
        proc = lpr(header, printer, proc.stdout)

    # we need to wait for all the commands to finish
    stdoutdata, stderrdata = proc.communicate()

    if fakeprint:
        # fake print! we're going to just output the file.
        # presumably we just wanted to 2-up it or something.
        if fakepdf:
            # force it back into a pdf (why!?!?)
            tmpfn = make_tempfile(stdoutdata)
            proc = Popen(['ps2pdf', tmpfn, '-'], stdout=PIPE)
            stdoutdata, stderrdata = proc.communicate()

        sys.stdout.write(stdoutdata)

    # delete temp files
    for tmpfn in temp_files:
        os.unlink(tmpfn)

if __name__ == '__main__':
    main()

